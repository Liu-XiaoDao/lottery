<style>
  body {
    background-color: #050505;
    background: radial-gradient(ellipse at center,  rgba(43,45,48,1) 0%,rgba(0,0,0,1) 100%);;  }
  .userbox {
    width: 300px;
    height: 300px;
    background: url() #fff center center no-repeat;
    background-size: contain;
    box-shadow: 0px 0px 20px rgba(255,255,255,0.8);
    border-radius: 10px;
    border: 1px solid rgba(127,255,255,0.25);
    cursor: default;
  }

  .userbox:hover, .userbox_selected {
    box-shadow: 0px 0px 50px rgba(255,255,255,0.55);
    border: 2px solid rgba(255,255,255,0.75);
  }

  .userbox .username {
    position: absolute;
    top: 270px;
    width: 100%;
    font-size: 14px;
    text-align: right;
    right: 30px;
    color: rgba(255,255,255,0.75);
  }
  #progressbar {
    position: fixed; width: 1000px;  border: 1px solid #fff; border-radius: 5px; height: 30px; line-height: 30px;
    color: #fff;
    left: 50%;
    margin-left: -500px;
    bottom: 50px;
    z-index: 999;
  }
  #bar { width: 0px; background: #fff; height: 30px;  }

</style>
<div id="progressbar"><div id="bar"></div></div>
<script>
if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

    var render, scene, camera, controls;
    var angleOfview = 75;
    var windowHalfX = window.innerWidth / 2;
    var windowHalfY = window.innerHeight / 2;
    var ratio=window.innerWidth/window.innerHeight;

    var objects = [], indexes = [];
    var targets = { table: [], sphere: [], helix: [], grid: [] };

    var maxW = 30;
    var maxH = 10;
    var imageW = 300, imageH = 300;
    var unitW = unitH = 350;
    var cameraZ = 4000;

    var tween, action_step = 0;
    var count_loaded = 0, count = 0;

    var api_base = '/',
        background = '<%= asset_path("background.jpg") %>',

    render = new THREE.CSS3DRenderer();
    scene  = new THREE.Scene();

    init();
    load_user();
    animate();

    function init() {
        render.setSize(window.innerWidth, window.innerHeight);
        render.domElement.style.position = 'absolute';
        render.domElement.style.top = 0;
        render.domElement.style.left = 0;
        render.domElement.style.backgroundImage = 'url('+background+')';
        render.domElement.style.backgroundColor = '#050505';
        // render.domElement.style.backgroundImage = '-webkit-radial-gradient(center, ellipse cover,  rgba(43,45,48,1) 0%,rgba(0,0,0,1) 100%)';
        camera=new THREE.PerspectiveCamera(angleOfview, ratio, 1, 10000);
        camera.position.x = 0;
        camera.position.y = 0;
        camera.position.z = cameraZ;
        scene.add(camera);

        camera.lookAt(new THREE.Vector3 (0, 0, -1000000000));
        document.body.appendChild( render.domElement );
        window.addEventListener( 'resize', onWindowResize, false );
    }

    function load_user() {
      var users = [];
      for(var i = 0; i < 200; i++){
				users.push({
					name: 'sanye',
					attendance: '00' + i,
          avatar_url: '/default_avatar.jpg',
					age: '18',
					deptName: 'xxx',
					dept4Name: 'xxxx'
				});
			}

      count = users.length;
      var key;
      for(key in users) {
        var row = parseInt(key/maxW);
        var col = key%maxW;
        var _x = ( col - maxW/2 ) * unitW + unitW/2;
        var _y = ( maxH/2 - row ) * unitH - unitH/2;

        (function() {
          var i = key;
          var x = _x;
          var y = _y;
          var z = 0;
          var img = new Image();
          img.src = users[i].avatar_url;
          img.onload = function() {
            var element = document.createElement( 'div' );
            element.className = 'userbox';
            element.style.backgroundImage = 'url('+img.src+')';
            var username = document.createElement( 'div' );
            username.className = 'username';
            username.textContent = users[i].name;
            element.appendChild( username );

            var obj = new THREE.CSS3DObject( element );
            obj.position.x = x;
            obj.position.y = y;
            obj.position.z = z;
            scene.add (obj );
            objects.push( obj );
            count_loaded += 1;
            document.getElementById('bar').style.width = 1000* (count_loaded/count)+'px';
            if (count == count_loaded) {
              document.getElementById('progressbar').style.display = 'none';
              load_position();
              tween = transform( targets.grid, 3000);
              window.addEventListener( 'keyup', process_keyup, false );
            }
          }
        })();
      }
    }

    function load_position() {
			var col = 8, row = 8, depth = 0;
      for ( var i = 0; i < objects.length; i ++ ) {
				var _col = i % col;
				var _row = parseInt( i/col) % row;
				var _depth = parseInt( i/(col*row));
        var object = new THREE.Object3D();
        object.position.x =  (( _col - col/2 ) + 1/2) *unitW * 3;
        object.position.y = (( row/2 - _row ) - 1/2) * unitH * 3;
        object.position.z = -_depth*1000 + 1000;
        targets.grid.push( object );
      }

    }


    function onWindowResize(){
        windowHalfX = window.innerWidth / 2;
        windowHalfY = window.innerHeight / 2;
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        render.setSize( window.innerWidth, window.innerHeight );
    }

  function transform( targets, duration ) {
    TWEEN.removeAll();
    for ( var i = 0; i < objects.length; i ++ ) {
      var object = objects[ i ];
      var target = targets[ i ];
      new TWEEN.Tween( object.position )
        .to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration )
        .easing( TWEEN.Easing.Exponential.InOut )
        .start();

      new TWEEN.Tween( object.rotation )
        .to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration )
        .easing( TWEEN.Easing.Exponential.InOut )
        .start();
    }
    return new TWEEN.Tween( this )
      .to( {}, duration * 2 )
      .start();
  }

  function renderer() {
    render.render(scene, camera);
  }

  function animate() {
    requestAnimationFrame( animate );
    TWEEN.update();
    renderer();
  }

  var keyup_count = 0;
  var selected = null;
  function process_keyup(e) {
    keyup_count += 1;
    var next = keyup_count % 2;
    if (next) {
      update_selecting_me();
    }else {
      update_award_me();
    }
  }

  function update_award_me()
  {
    var _obj = objects[selected];
  }

  function update_selecting_me()
  {
    if (keyup_count%2 == 0 ) return false;
    selected = parseInt(Math.random()*count);
    var obj = objects[selected];
    console.log(camera.position);
    new TWEEN.Tween( camera.position )
      .to( { x: obj.position.x, y: obj.position.y, z: obj.position.z + 300 },  1000 )
      .easing( TWEEN.Easing.Exponential.InOut)
      .onComplete(function() {
        camera.lookAt(obj.position);
        update_selecting_me();
      })
      .start();
  }

</script>
